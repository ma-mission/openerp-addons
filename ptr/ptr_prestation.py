import csvimport psycopg2import openerp.exceptionsfrom openerp.osv import osv, fields,ormfrom openerp import toolsfrom datetime import datetimefrom dateutil.relativedelta import relativedeltafrom operator import itemgetterimport timeimport openerpfrom openerp import SUPERUSER_IDfrom openerp import pooler, toolsfrom openerp.osv import fields, osv, expressionfrom openerp.tools.translate import _class ptr_prestation(osv.osv):	def create(self, cr, uid, vals, context=None):		if 'cout' in vals:			cr.execute("SELECT SUM(cout) FROM ptr_prestation WHERE intervention="+str(vals['intervention']))			couttotal=cr.fetchone()[0]			if couttotal is None:				couttotal=0			cr.execute("UPDATE ptr_intervention SET coutprestation="+str(float(couttotal)+float(vals['cout']))+" WHERE id="+str(vals['intervention']))			return super(ptr_prestation, self).create(cr, uid, vals, context)		def unlink(self, cr, uid, ids, context=None):		obj=self.browse(cr,uid,ids,context=None)		for rec in obj:			id_interv=rec.intervention.id			mnt_regl=rec.cout		cr.execute("SELECT SUM(cout) FROM ptr_prestation WHERE intervention="+str(id_interv))		couttotal=cr.fetchone()[0]		if couttotal is None:			couttotal=0		cr.execute("UPDATE ptr_intervention SET coutprestation="+str(float(couttotal)-float(mnt_regl))+" WHERE id="+str(id_interv))		return super(ptr_prestation, self).unlink(cr, uid, ids, context=context)				def write(self, cr, uid, ids, vals, context=None):		if 'cout' in vals:			obj=self.browse(cr,uid,ids,context=None)			for rec in obj:				id_interv=rec.intervention.id			cr.execute("SELECT SUM(cout) FROM ptr_prestation WHERE intervention="+str(id_interv))			couttotal=cr.fetchone()[0]			if couttotal is None:				couttotal=0			cr.execute("UPDATE ptr_intervention SET coutprestation="+str(couttotal)+" WHERE id="+str(id_interv))			return super(ptr_prestation, self).write(cr, uid, ids, vals, context=context)	def ptr_prestation_CheckVolH(self, cr, uid, ids,context=None):		obj=self.browse(cr,uid,ids,context=None)		for rec in obj:			tmp=rec.volh			if float(tmp)<0 :				return False			return True				def ptr_prestation_CheckCout(self, cr, uid, ids,context=None):		obj=self.browse(cr,uid,ids,context=None)		for rec in obj:			tmp=rec.cout			if float(tmp)<0 :				return False			return True	_rec_name = 'libelle'	_name = 'ptr.prestation'	_description = "Classe des prestations"	_columns = {        'code': fields.char('Code'),		'libelle': fields.char('Libelle', required=True),		'prestataire': fields.char('Prestataire', required=True),		'volh': fields.float('Vol.Horaire'),		'cout': fields.float('Cout Prestation', required=True),		'dateprestation':fields.date('Date Prestation', required=True),		'intervention':fields.many2one('ptr.intervention','Intervention', ondelete='cascade'),		'statut':fields.char('Statut'),		'reglement_ids': fields.one2many('ptr.reglement','prestation',string='Reglement'),		}			_defaults = {		'statut' : 'Impayee'		}	_constraints = [        (ptr_prestation_CheckVolH, 'Error!\nCertains volumes horaires de prestations sont negatifs',['volh']),		(ptr_prestation_CheckCout, 'Error!\nCertains couts de prestations sont negatifs',['cout']),    ]ptr_prestation()